#   left_join(Socioeconomic_norm, by = c("Local.Authority" = "Local.authority")) %>% # Join socioeconomic after cleaning
#   left_join(Socioeconomic_UK_norm, by = c("Local.Authority" = "area.label"))
# With this we have cleaned the data as desired.
# For safekeeping the columns labels: (this will be particulary useful if needed to operate within these)
# GHG_columns = colnames(GHG_p)[3:42]
# Socioeconomic_columns = colnames(GHG_p)[43:565]
# Socioeconomic_UK_columns = colnames(GHG_p)[566:1136]
rm(Per_capita_cols, Columns_with_missing, GHG)
#rm(Socioeconomic,Socioeconomic_UK)  < will use for multiple scopes later
# from this point onwards:
# GHG is the cleansed data but original values
# GHG_p is the cleansed data per capita
rm(Socioeconomic_UK)
Socioeconomic_UK_norm_bck = Socioeconomic_UK_norm
Socioeconomic_UK_catalog = tibble(
names = colnames(Socioeconomic_UK_norm[2:565])) %>%
mutate(
col_name = str_c("A",row_number())
)
Socioeconomic_UK_norm_bck = `colnames<-`(Socioeconomic_UK_norm,
c("area.label",as.character(Socioeconomic_UK_catalog$col_name)))
write.xlsx(Socioeconomic_UK_catalog, "Variable Catalog - UK.xlsx", overwrite = T)
# Clean Variable names
Socioeconomic_UK_norm =`colnames<-`(Socioeconomic_UK_norm,str_replace_all(colnames(Socioeconomic_UK_norm),"\\."," "))
#-----------------------------------------
#     Clustering and characterisation
#-----------------------------------------
library(cluster)
library(factoextra)
fviz_nbclust(Socioeconomic_UK_norm[,2:565], kmeans, method = "wss")
#### NOTE:
# CHECK THIS BECAUSE THE IMPORTANCE IS SHOWING THE SAME FOR ALL CLUSTERS
results_kmeans = kmeans(Socioeconomic_UK_norm %>% select(-`area label`),
centers = 7)
results_kmeans$cluster <- ifelse(results_kmeans$cluster == "3", 1, results_kmeans$cluster)
results_kmeans$cluster <- ifelse(results_kmeans$cluster == "7", 3, results_kmeans$cluster)
Socioeconomic_UK_norm$cluster = as.factor(results_kmeans$cluster)
#City of london is on its own, add to other London
write.xlsx(Socioeconomic_UK_norm %>%
select(`area label`,cluster),
file = "Clusters UK.xlsx",
overwrite = TRUE)
rm(results,results_kmeans)
# XGBoost to find the importance on both models
xgb_train = xgb.DMatrix(data = data.matrix(Socioeconomic_UK_norm[,2:565]),
label = data.matrix(Socioeconomic_UK_norm[,566]))
model = xgb.train(data = xgb_train, nrounds = 1000)
importance_matrix = xgb.importance(colnames(xgb_train), model = model)
importance_matrix
xgb.plot.importance(importance_matrix[1:5,], left_margin = 25 ,main= "Overall Variable Importance")
# # find the importance in each cluster
#
Socioeconomic_norm_importance = Socioeconomic_UK_norm %>%
mutate(Cluster_1 = if_else(cluster == 1,1,2),
Cluster_2 = if_else(cluster == 2,2,3),
Cluster_3 = if_else(cluster == 3,3,4),
Cluster_4 = if_else(cluster == 4,4,5))
# # Cluster 1
xgb_train = xgb.DMatrix(data = data.matrix(Socioeconomic_norm_importance[,2:565]),
label = data.matrix(Socioeconomic_norm_importance[,566]))
model = xgb.train(data = xgb_train, nrounds = 1000)
importance_matrix = xgb.importance(colnames(xgb_train), model = model)
xgb.plot.importance(importance_matrix, top_n = 6 ,main= "Cluster 1 vs. Others",
left_margin = 30)
# # Cluster 2
xgb_train = xgb.DMatrix(data = data.matrix(Socioeconomic_norm_importance[,2:565]),
label = data.matrix(Socioeconomic_norm_importance[,566]))
model = xgb.train(data = xgb_train, nrounds = 1000)
importance_matrix = xgb.importance(colnames(xgb_train), model = model)
xgb.plot.importance(importance_matrix, top_n = 6,main= "Cluster 2 vs. Others",
left_margin = 30)
# # Cluster 3
xgb_train = xgb.DMatrix(data = data.matrix(Socioeconomic_norm_importance[,2:565]),
label = data.matrix(Socioeconomic_norm_importance[,566]))
model = xgb.train(data = xgb_train, nrounds = 1000)
importance_matrix = xgb.importance(colnames(xgb_train), model = model)
xgb.plot.importance(importance_matrix, top_n = 6,main= "Cluster 3 vs. Others",
left_margin = 30)
# # Cluster 4
xgb_train = xgb.DMatrix(data = data.matrix(Socioeconomic_norm_importance[,2:565]),
label = data.matrix(Socioeconomic_norm_importance[,566]))
model = xgb.train(data = xgb_train, nrounds = 1000)
importance_matrix = xgb.importance(colnames(xgb_train), model = model)
xgb.plot.importance(importance_matrix, top_n = 6,main= "Cluster 4 vs. Others",
left_margin = 30)
rm(Socioeconomic_norm_importance,xgb_train)
rm(Socioeconomic_norm_importance,xgb_train, model, importance_matrix)
#---------------
#   Boxplots
#---------------
# Combine taxas or clusters
Socioeconomic_UK_norm = Socioeconomic_UK_norm  %>%
mutate(cluster = as.factor(if_else(cluster %in% c(1,3,4),1,2)))
# e) Boxplot to compare key features
List_socioeconomicInfrast = c("Average.time.to.8.key.services.by.PT/walk",
"Average.time.to.8.key.services.by.car",
"Average.time.to.8.key.services.by.cycle")
List_socioeconomicGovernanceCapacity = c("LA.Employees.Per.Capita",
"Budget.-.Net.current.expenditure.per.head.of.population.-.total.service.expenditure.(RA)",
"Total.LA.employees.(FTE)")
List_socioeconomicEnvironmentalGovernanceCapacity = c("Environmental.and.regulatory.staff.per.capita",
"Budget.-.Net.current.expenditure.per.head.of.population.-.regulatory.services.(RA)",
"Budget.-.Net.current.expenditure.per.head.of.population.-.environmental.and.regulatory.services.(RA)",
"Budget.-.Net.current.expenditure.per.head.of.population.-.planning.and.development.services.(RA)" , "Employees.-.TOTAL.ENVIRONMENTAL.AND.REGULATORY.SERVICES"
)
List_socioeconomicSocialandDemographic = c("%.population.aged.0.to.17.(census)",
"Total.BME.population",
"%.population.aged.65.and.over.(census)",
"Residents.in.urban.areas",
"Looking.after.home.or.family.(%)")
List_socioeconomicHealthandWellbeing = c("Bad.health.(%)",
"IMD:.Overall.-.score", "Economically.inactive.%",
"IMD:.Income.Deprivation.-.score",
"Excess.Winter.Mortality.Index.(%)"
)
List_socioeconomicEconomic = c("Professional.occupations",
"GVA:.Manufacturing", "GVA:.Services.sector",
"GVA:.All.industries",
"Total.income.(median).per.taxpayer.in.an.area")
Socioeconomic_norm_boxplot = Socioeconomic_UK_norm_bck %>%
left_join(Socioeconomic_UK_norm %>%
select(`area label`, cluster),
by = c("area.label" = "area label")) %>%
pivot_longer(cols = A1:A564, # `No  of reported road casualties - Pedal cyclists`
names_to = "col_name",
values_to = "Socioeconomic") %>%
left_join(Socioeconomic_UK_catalog, by = "col_name")
#figs
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicInfrast) %>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Infrastructure Characteristics by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-2,2)
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicGovernanceCapacity)%>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Governance Capacity by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-2,2)
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicEnvironmentalGovernanceCapacity)%>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Environmental Governance Capacity by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-1,1)
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicSocialandDemographic)%>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Social and Demographic Characteristics by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-2,2)
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicEconomic)%>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Key Economic Characteristics by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-2,4)
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_socioeconomicHealthandWellbeing)%>%
mutate(names = str_replace_all(names, "\\.", " ")),
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot(outlier.coef = 10) +
labs(title = "Health and Wellbeing Characteristics by Cluster" ,
x= "Cluster", y = "Socioeconomic Characteristic") +
scale_fill_brewer(palette = "Set3")+
ylim(-2,2)
# f) Boxplot to compare key Economic features
List_economic = c(
"GVA:.All.industries",
"GVA:.Agriculture,.mining,.electricity,.gas,.water.and.waste",
"GVA:.Manufacturing",
"GVA:.Transportation.and.storage",
"GVA:.Professional,.scientific.and.technical.activities",
"GVA:.Human.health.and.social.work.activities",
"GVA:.Services.sector",
"GVA:.Production.sector",
"GVA:.Public.administration.and.defence",
"GVA:.Activities.of.households",
"GVA:.Real.estate.activities",
"GVA:.Construction",
"GVA:.All.industries")
ggplot(Socioeconomic_norm_boxplot %>%
filter(names %in% List_economic)%>%
mutate(names = str_replace_all(names, "\\.", " ")) ,
aes(x=cluster, y = Socioeconomic, fill = names)) +
geom_boxplot() +
labs(title = "Key Economic Characteristics by Cluster" ,
x= "Cluster", y = "Economic Characteristic") +
scale_fill_brewer(palette = "Set3") + ylim(-1,3)
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 6))
rm(List_economic, List_socioeconomicEconomic,
List_socioeconomicEnvironmentalGovernanceCapacity,
List_socioeconomicHealthandWellbeing,
List_socioeconomicInfrast, List_socioeconomicSocialandDemographic)
rm(List_economic, List_socioeconomicEconomic,
List_socioeconomicEnvironmentalGovernanceCapacity,
List_socioeconomicHealthandWellbeing,
List_socioeconomicEnvironmentalGovernanceCapacity,
List_socioeconomicInfrast, List_socioeconomicSocialandDemographic)
View(Socioeconomic_UK_norm)
case_study_data = read.xlsx("case study data 08.01.2023.xlsx") %>%
left_join(Socioeconomic_UK_norm_bck %>%
select(area.label, cluster), by = c("Location" = "area.label"))
View(Socioeconomic_UK_norm_bck)
case_study_data = read.xlsx("case study data 08.01.2023.xlsx") %>%
left_join(Socioeconomic_UK_norm %>%
select(`area label`, cluster), by = c("Location" = "area label"))
# Which case studies are not matching?
# Some of the case studies must not have matched, do we know which ones?
write.xlsx(case_study_data %>%
filter(is.na(cluster)),
file = "Not maching case studies.xlsx",
overwrite = T)
# What is the number of case studies in each cluster
case_study_data %>%
select(Location, cluster) %>%
group_by(cluster) %>%
summarise(`Number of Case Studies` = n())  # case studies
case_study_data %>%
select(Location, cluster) %>%
distinct() %>%
group_by(cluster) %>%
summarise(`Number of Locations` = n())  # distinct locations
ggplot(case_study_data %>%
filter(!is.na(cluster)),
aes(x= as.factor(cluster), fill = Main.action.area.of.initiative)) +
geom_bar(position = "dodge")  +
scale_fill_brewer(palette = "Set1") +
labs(x = "Cluster", y = "Count of Cases Studies",
title = "Number of case studies by Cluster",
fill = "Main area of initiative")
# Make two figs
ggplot(case_study_data %>%
filter(!is.na(cluster),
between(cluster,1,6)),
aes(x= as.factor(cluster), fill = Main.action.area.of.initiative)) +
geom_bar(position = "dodge")  +
scale_fill_brewer(palette = "Set4") +
labs(x = "Cluster", y = "Count of Cases Studies",
title = "Number of case studies by Cluster (clusters 1 to 5)",
fill = "Main area of initiative")
case_study_data_pie = case_study_data %>%
mutate(number = 1) %>%
group_by(Main.action.area.of.initiative) %>%
summarise(cantidad = sum(number))
ggplot(case_study_data_pie, aes(x = " ", y=cantidad, fill= Main.action.area.of.initiative)) +
geom_col(color = "black") +
geom_text(aes(label = cantidad),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
labs(fill = "Main action area of initiative",
title = "Number of case studies per Area of initiative") +
scale_fill_viridis( discrete = T) +
theme_void()
rm(case_study_data_pie)
ggplot(case_study_data %>%
filter(!is.na(cluster)) %>%
group_by(cluster,Main.action.area.of.initiative) %>%
summarise(case_studies = n()) %>%
group_by(cluster) %>%
summarise(`Average of Case Studies per Cluster (grouping Categories)` = mean(case_studies)),
aes(x= as.factor(cluster),
y = `Average of Case Studies per Cluster (grouping Categories)`)) +
geom_bar(stat = "identity")  +
scale_fill_brewer(palette = "Set2") +
labs(x = "Cluster",
title = "Mean number of case studies by Cluster")
# This is the same graph as above, except not in dodge.. I believe
ggplot(case_study_data %>%
filter(!is.na(cluster)) %>%
group_by(cluster,Main.action.area.of.initiative) %>%
summarise(case_studies = n()),
aes(x = as.factor(cluster),
y = case_studies,
fill = Main.action.area.of.initiative)) +
geom_bar(stat = "identity")  +
scale_fill_brewer(palette = "Set3") +
labs(x = "Cluster",
title = "Mean number of case studies by Cluster")
Corrections
number_of_locs = n_distinct(case_study_data$Location)
ggplot(case_study_data %>%
filter(!is.na(cluster)) %>%
group_by(cluster) %>%
summarise(locations = n_distinct(Location),
initiatives = n_distinct(Main.action.area.of.initiative),
n_case_studies = n(),
weight = n_case_studies/number_of_locs),
aes(x = as.factor(cluster),
y = weight)) +
geom_bar(stat = "identity")  +
# scale_fill_brewer(palette = "Set3") +
labs(x = "Cluster",
y= "Calculated Weight",
title = "Mean number of case studies by Cluster")
####
number_of_locs = case_study_data %>%
group_by(Main.action.area.of.initiative) %>%
summarise(n_vals = n_distinct(Location))
ggplot(case_study_data %>%
filter(!is.na(cluster)) %>%
group_by(cluster,Main.action.area.of.initiative) %>%
summarise(n_case_studies = n()) %>%
left_join(number_of_locs, by = "Main.action.area.of.initiative") %>%
mutate(weight =  n_case_studies/n_vals),
aes(x = as.factor(cluster),
y = weight,
fill = Main.action.area.of.initiative)) +
geom_bar(stat = "identity")  +
scale_fill_brewer(palette = "Set3") +
labs(x = "Cluster",
y= "Calculated Weight",
title = "Mean number of case studies by Cluster")
ggplot(case_study_data %>%
filter(!is.na(cluster)) %>%
group_by(cluster,Main.action.area.of.initiative) %>%
summarise(n_case_studies = n()) %>%
left_join(number_of_locs, by = "Main.action.area.of.initiative") %>%
mutate(weight =  n_case_studies/n_vals),
aes(x = as.factor(cluster),
y = weight,
fill = Main.action.area.of.initiative)) +
geom_bar(stat = "identity")  +
scale_fill_brewer(palette = "Set3") +
labs(x = "Cluster",
y= "Calculated Weight",
title = "Mean number of case studies by Cluster",
fill = "Main action area of initiative")
View(GHG_p)
View(GHG_p)
View(GHG_p)
GHG_p_change_emissions = GHG_p %>%
filter(Calendar.Year %in% c(2008,2019))
View(GHG_p_change_emissions)
GHG_p_change_emissions = GHG_p %>%
filter(Calendar.Year %in% c(2008,2019)) %>%
select(Local.Authority, Calendar.Year, Grand.Total) %>%
pivot_wider(id_cols = Local.Authority,names_from = Calendar.Year)
GHG_p_change_emissions = GHG_p %>%
filter(Calendar.Year %in% c(2008,2019)) %>%
select(Local.Authority, Calendar.Year, Grand.Total) %>%
pivot_wider(id_cols = Local.Authority,names_from = Calendar.Year, values_from = Grand.Total)
View(GHG_p_change_emissions)
View(Socioeconomic_norm_boxplot)
View(Socioeconomic_UK_norm)
rm(List_socioeconomicGovernanceCapacity, number_of_locs, case_study_data,
Socioeconomic_UK_catalog)
Socioeconomic_norm_scatter = Socioeconomic_UK_norm %>%
select(`area label`, `Average time to 8 key services by PT/walk`,
`Budget - Net current expenditure per head of population - environmental and regulatory services (RA)`,
`IMD: Overall - score`
)
View(Socioeconomic_norm_scatter)
GHG_p_change_emissions = GHG_p %>%
filter(Calendar.Year %in% c(2008,2019)) %>%
select(Local.Authority, Calendar.Year, Grand.Total) %>%
pivot_wider(id_cols = Local.Authority,
names_from = Calendar.Year,
values_from = Grand.Total) %>%
mutate(`% Change` = `2019`/`2008` - 1)
View(GHG_p_change_emissions)
Socioeconomic_norm_scatter = Socioeconomic_UK_norm %>%
select(`area label`, `Average time to 8 key services by PT/walk`,
`Budget - Net current expenditure per head of population - environmental and regulatory services (RA)`,
`IMD: Overall - score`
) %>%
inner_join(GHG_p_change_emissions, by = c("area label" = "Local.Authority"))
View(Socioeconomic_norm_scatter)
ggplot(Socioeconomic_norm_scatter,
aes(x=`% Change` , y =`Average time to 8 key services by PT/walk`)) +
geom_point()
ggplot(Socioeconomic_norm_scatter,
aes(x=`% Change` , y =`Average time to 8 key services by PT/walk`)) +
geom_point()
ggplot(Socioeconomic_norm_scatter,
aes(x=`% Change` ,
y =`Budget - Net current expenditure per head of population - environmental and regulatory services (RA)`)) +
geom_point()
ggplot(Socioeconomic_norm_scatter,
aes(x=`% Change` , y =`IMD: Overall - score`)) +
geom_point()
install.packages("openai")
Sys.setenv(
OPENAI_API_KEY = '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'
)
create_completion(
model = "ada",
prompt = "Generate a question and an answer"
)
# Require package
#install.packages("openai")
# Libraries
library(openai)
Sys.setenv(
OPENAI_API_KEY = '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'
)
create_completion(
model = "ada",
prompt = "Generate a question and an answer"
)
create_completion(
model = "ada",
prompt = "What is the square root of 4"
)
library(pdftools)
detach(pdftools)
install.packages("tabulizer")
# Get a list of all currently installed packages
installed_packages <- installed.packages()
# Save the names of the installed packages to a variable
package_names <- installed_packages[,1]
# Update R to the latest version
install.packages("installr")
library(installr)
updateR()
# Reinstall all previously installed packages
for (package in package_names) {
install.packages(package, dependencies = TRUE)
}
save.image("D:/Documentos/R Scripts/Packages.RData")
load("D:/Documentos/R Scripts/Packages.RData")
for (package in package_names) {
install.packages(package, dependencies = TRUE)
}
#pdf procesing
library(textract)
install.packages("textract")
install.packages("pdfetch")
#pdf procesing
library(pdfetch)
install.packages("poppler")
install.packages("readPDF")
# Container
pdf_directory = "D:/Freelancering/Andrew/ChatGPT consultation/academic read/academic read"
setwd(pdf_directory)
# get all files
pdf_files <- list.files(path = pdf_directory, pattern = ".pdf")
#############
#   tabulizer
#############
# Try with tabulizer package
pdf_text <- ""
for (file in pdf_files) {
# Use the extract_text() function from the tabulizer package to extract the text content of the PDF file
text <- extract_text(file)
# Append the extracted text to the pdf_text variable
pdf_text <- paste(pdf_text, text, sep = "\n")
}
library(tabulizer)
install.packages("tabulizer")
#pdf procesing
library(pdftools)
library(pdfminer)
install.packages("pdfminer")
library(pdfminer)
# Initialize an empty character vector to store the text
all_text <- character()
pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
# Loop through each PDF file and extract its text
for (pdf_file in pdf_files) {
# Extract the text from the PDF file and append it to the all_text vector
all_text <- c(all_text, read.pdf(pdf_file, method = 'sqlite', pyexe = pyexe ))
}
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- 'C:/Users/Luis Vasquez/Anaconda3/python.exe'
# Loop through each PDF file and extract its text
for (pdf_file in pdf_files) {
# Extract the text from the PDF file and append it to the all_text vector
all_text <- c(all_text, read.pdf(pdf_file, method = 'sqlite', pyexe = pyexe ))
}
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- "C:/Users/Luis Vasquez/Anaconda3/python.exe"
# Loop through each PDF file and extract its text
for (pdf_file in pdf_files) {
# Extract the text from the PDF file and append it to the all_text vector
all_text <- c(all_text, read.pdf(pdf_file, method = 'sqlite', pyexe = pyexe ))
}
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- r'C:/Users/Luis Vasquez/Anaconda3/python.exe'
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- "r'C:/Users/Luis Vasquez/Anaconda3/python.exe"
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- "r'C:/Users/Luis Vasquez/Anaconda3/python.exe'"
# Loop through each PDF file and extract its text
for (pdf_file in pdf_files) {
# Extract the text from the PDF file and append it to the all_text vector
all_text <- c(all_text, read.pdf(pdf_file, method = 'sqlite', pyexe = pyexe ))
}
# pyexe <- "C:/Users/Luis Vasquez/AppData/Local/Programs/Python/Python38/python.exe"
pyexe <- "C:/Users/Luis Vasquez/Anaconda3/python.exe"
# Loop through each PDF file and extract its text
for (pdf_file in pdf_files) {
# Extract the text from the PDF file and append it to the all_text vector
all_text <- c(all_text, read.pdf(pdf_file, method = 'sqlite', pyexe = pyexe ))
}
